name: Deploy Homolog Unique 
on:
  workflow_dispatch:
    inputs:
      base_branch:
        description: 'Branch base para criar a temporária'
        required: true
      cliente_ID:
        description: 'ID do cliente (nome do arquivo .properties)'
        required: true


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Definir destino_branch
      run: echo "destino_branch=fluighub${{ github.event.inputs.cliente_ID }}-prod" >> $GITHUB_ENV
      
    - name: Checar o repositório
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # pega todo o histórico

    - name: Configurar Git
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Criar branch temporária
      run: |
        git fetch origin ${{ github.event.inputs.base_branch }}
        git checkout -b temp-fluighub${{ github.event.inputs.cliente_ID }} origin/${{ github.event.inputs.base_branch }}

    - name: Copiar .properties da main
      run: |
        mkdir -p fluigshub/src/main/webapp/resources
        git fetch origin main
        git show origin/main:configs/fluighub${{ github.event.inputs.cliente_ID }}.properties > fluigshub/src/main/webapp/resources/config.properties

    - name: Criar application.info
      run: |
        mkdir -p fluigshub/src/main/webapp
        git fetch --tags origin main
        LAST_TAG=$(git tag --sort=-creatordate --merged origin/main | head -n 1)
        if [ -z "$LAST_TAG" ]; then
          LAST_TAG="1.0.0"
        fi
        echo "$LAST_TAG" > last_tag.txt  # <-- Salva a versão
        echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
        
        echo "id=fluighub-${{ github.event.inputs.cliente_ID }}" > fluigshub/src/main/webapp/resources/application.info
        echo "name=Fluig Hub Cliente ${{ github.event.inputs.cliente_ID }}" >> fluigshub/src/main/webapp/resources/application.info
        echo "version=$LAST_TAG" >> fluigshub/src/main/webapp/application.info
        cat fluigshub/src/main/webapp/application.info
    
    - name: Salvar versão como artifact
      uses: actions/upload-artifact@v4
      with:
        name: last_tag
        path: last_tag.txt

    - name: Fazer commit e push para destino
      run: |
        git add fluigshub/src/main/webapp/resources/config.properties
        git add fluigshub/src/main/webapp/resources/application.info
        git commit -m "Adiciona config.properties e application.info do cliente ${{ github.event.inputs.cliente_ID }}"
        git push origin temp-fluighub${{ github.event.inputs.cliente_ID }}:$destino_branch --force

    - name: Apagar branch temporária local
      run: |
        git checkout $destino_branch
        git branch -D temp-fluighub${{ github.event.inputs.cliente_ID }}

    - name: Apagar branch temporária remota (caso tenha sido criada)
      run: |
        git push origin --delete temp-fluighub${{ github.event.inputs.cliente_ID }} || echo "Branch remota não existia"
      
    - name: Configurar Java 11 (OpenJDK)
      uses: actions/setup-java@v3
      with:
          distribution: 'temurin'
          java-version: '11'

    - name: Compilar projeto
      run: |
        git checkout $destino_branch
        cd fluigshub
        mvn clean install


    - name: Upload do artefato
      uses: actions/upload-artifact@v4
      with:
          name: fluighub${{ github.event.inputs.cliente_ID }}-${{ env.LAST_TAG }}-${{ github.run_number }}
          path: fluigshub/target/*.war

  
  login_fluig:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar dependências
        run: pip install -r jobs/requirements.txt

      - name: Extrair dados do cliente
        run: |
          echo '${{ secrets.SERVIDORES_HOMOLOG_JSON }}' > clientes.json

          HOST=$(jq -r --arg id "${{ github.event.inputs.cliente_ID }}" '.[$id].host' clientes.json)
          PORT=$(jq -r --arg id "${{ github.event.inputs.cliente_ID }}" '.[$id].port' clientes.json)
          USERNAME=$(jq -r --arg id "${{ github.event.inputs.cliente_ID }}" '.[$id].username' clientes.json)
          PASSWORD=$(jq -r --arg id "${{ github.event.inputs.cliente_ID }}" '.[$id].password' clientes.json)

          if [ "$HOST" = "null" ] || [ "$PORT" = "null" ] || [ "$USERNAME" = "null" ] || [ "$PASSWORD" = "null" ]; then
            echo "❌ Cliente inválido ou dados incompletos: ${{ github.event.inputs.cliente_ID }}"
            exit 1
          fi

          echo "FLUIG_HOST=$HOST" >> $GITHUB_ENV
          echo "FLUIG_PORT=$PORT" >> $GITHUB_ENV
          echo "FLUIG_USERNAME=$USERNAME" >> $GITHUB_ENV
          echo "FLUIG_PASSWORD=$PASSWORD" >> $GITHUB_ENV

      - name: Rodar script de login e salvar cookies
        run: |
          python jobs/login.py

      - name: Salvar cookies como artifact
        uses: actions/upload-artifact@v4
        with:
          name: cookies
          path: cookies.json

  deploy:
    runs-on: ubuntu-latest
    needs: login_fluig   # <-- só roda depois do login
      
    steps:

      - name: Checkout código
        uses: actions/checkout@v4

      - name: Baixar o artifact da versão
        uses: actions/download-artifact@v4
        with:
          name: last_tag
      
      - name: Ler versão e definir como variável
        id: ler_versao
        run: |
          LAST_TAG=$(cat last_tag.txt)
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
      
      - name: Baixar o artifact
        uses: actions/download-artifact@v4
        with:
          name: fluighub${{ github.event.inputs.cliente_ID }}-${{ env.LAST_TAG }}-${{ github.run_number }}
      
      - name: Baixar cookies.json do job anterior
        uses: actions/download-artifact@v4
        with:
          name: cookies
        
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Instalar requests
        run: pip install -r jobs/requirements.txt

      - name: Extrair dados do cliente
        run: |
          echo '${{ secrets.SERVIDORES_HOMOLOG_JSON }}' > clientes.json

          HOST=$(jq -r --arg id "${{ github.event.inputs.cliente_ID }}" '.[$id].host' clientes.json)
          PORT=$(jq -r --arg id "${{ github.event.inputs.cliente_ID }}" '.[$id].port' clientes.json)
          USERNAME=$(jq -r --arg id "${{ github.event.inputs.cliente_ID }}" '.[$id].username' clientes.json)
          PASSWORD=$(jq -r --arg id "${{ github.event.inputs.cliente_ID }}" '.[$id].password' clientes.json)

          if [ "$HOST" = "null" ] || [ "$PORT" = "null" ] || [ "$USERNAME" = "null" ] || [ "$PASSWORD" = "null" ]; then
            echo "❌ Cliente inválido ou dados incompletos: $cliente_id"
            exit 1
          fi

          echo "FLUIG_HOST=$HOST" >> $GITHUB_ENV
          echo "FLUIG_PORT=$PORT" >> $GITHUB_ENV
          echo "FLUIG_USERNAME=$USERNAME" >> $GITHUB_ENV
          echo "FLUIG_PASSWORD=$PASSWORD" >> $GITHUB_ENV
  
      - name: Descobrir caminho do arquivo WAR
        id: descobrir_caminho
        run: |
          caminho=$(find . -name "*.war" | head -n 1)
          echo "widget_file_path=$caminho" >> $GITHUB_ENV
        
      - name: Rodar upload do widget
        run: |
          python jobs/upload.py
      
      - name: Limpar arquivos temporários
        if: always()
        run: |
          rm -f cookies.json clientes.json
